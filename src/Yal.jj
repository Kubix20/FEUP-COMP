/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Yal.jj */
/*@egen*/options {
  LOOKAHEAD=1;
             
  IGNORE_CASE=true;
                         
                    
}

PARSER_BEGIN(Yal)
import java.io.FileReader;
import java.io.FileNotFoundException;
public class Yal/*@bgen(jjtree)*/implements YalTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTYalState jjtree = new JJTYalState();

/*@egen*/
  public static int nErrors = 0;
  public static final int ERROR_LIMIT = 5;
  public static void main(String args[]) throws ParseException, FileNotFoundException {
	String newline = System.lineSeparator();
	System.out.println(newline+newline+
					   "<<<<<<<< Parsing file "+ args[0]+ " >>>>>>>>>"+
					   newline+newline);
    Yal parser = new Yal(new FileReader(args[0]));
    ASTModule root = parser.Module();
    root.dump(">");
    System.out.println("Program parsed with "+Yal.nErrors+" errors");
  }
}
PARSER_END(Yal)

<DEFAULT> SKIP : {
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}
/* reserved words */
<DEFAULT> TOKEN : {
  <RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
  | <ADDSUB_OP: "+" | "-">
  | <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
  | <BITWISE_OP: "&" | "|" | "^">
  | <NOT_OP: "!">
  | <WHILE: "while">
  | <IF: "if">
  | <ELSE: "else">
  | <ASSIGN: "=">
  | <ASPA: "\"">
  | <LPAR: "(">
  | <RPAR: ")">
  | <VIRG: ",">
  | <PVIRG: ";">
  | <LCHAVETA: "{">
  | <RCHAVETA: "}">
  | <FUNCTION: "function">
  | <MODULE: "module">
  | <SIZE: "size">
}
<DEFAULT> TOKEN : {
  <INTEGER: (<DIGIT>)+>
  | <ID: <LETTER> (<LETTER> | <DIGIT>)*>
  | <#LETTER: ["$","A"-"Z","_","a"-"z"]>
  | <#DIGIT: ["0"-"9"]>
  | <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

JAVACODE
void error_skipto(ParseException e, int kind, String whereWasCaught) {
  ++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message
  Token t;
  //MUST be do while
  do {
    t = getNextToken();
	System.out.println(t);
  } while (t.kind != kind);
  System.out.println("Proceeding with "+t.image+" of kind "+t.kind);
}

JAVACODE
boolean contains(int[] kinds, int kind) {
  for(int i=0; i<kinds.length; i++) {
	  if(kinds[i] == kind)
		  return true;
  }
  return false;
}
JAVACODE
void error_multskipto(ParseException e, int[] kinds, String whereWasCaught) {
  ++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message
  Token t;
  //MUST be do while
  do {
    t = getNextToken();
	System.out.println(t);
  } while (!contains(kinds,t.kind));
  System.out.println("Proceeding with "+t.image+" of kind "+t.kind);
}

JAVACODE
void error(ParseException e, String whereWasCaught) {
  ++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message
}

ASTModule Module()         : {/*@bgen(jjtree) Module */
                              ASTModule jjtn000 = new ASTModule(JJTMODULE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
                              jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}
{/*@bgen(jjtree) Module */
  try {
/*@egen*/
  <MODULE> t1=<ID>{jjtn000.setValues(t1.image);} <LCHAVETA> (Declaration())* (Function())*
  try {
	<RCHAVETA>
  }
  catch(ParseException e){
    error_skipto(e, RCHAVETA, "BEFORE MODULE END");
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Declaration()              : {/*@bgen(jjtree) Declaration */
                                   ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
                                   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}
{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/
  try{
	Element() [t1=<ASSIGN>{jjtn000.setValues(t1.image);} (("[" ArraySize() "]") | IntElement())] <PVIRG>
  }
  catch(ParseException e){
    error_skipto(e, PVIRG, "DECLARATION");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Function()           : {/*@bgen(jjtree) Function */
                             ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  try {
    <FUNCTION> [LOOKAHEAD(2) Element() <ASSIGN>] t1=<ID>{jjtn000.setValues(t1.image);} <LPAR>
  }
  catch(ParseException e){
    error_skipto(e, LPAR, "FUNCTION DECLARATION");
  }

  try {
    [Varlist()] <RPAR>
  }
  catch(ParseException e){
    error_skipto(e, RPAR, "FUNCTION DECLARATION ARGS");
  }

    <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void IntElement()             : {/*@bgen(jjtree) IntElement */
                                 ASTIntElement jjtn000 = new ASTIntElement(JJTINTELEMENT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1 = null, t2 = null;}
{/*@bgen(jjtree) IntElement */
  try {
/*@egen*/
  [t1=<ADDSUB_OP>] t2=<INTEGER>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
                               }
/*@egen*/{jjtn000.setValues((t1 == null ? "": t1.image), (t2 == null ? "": t2.image));}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Varlist()          : {/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Varlist */
  try {
/*@egen*/
  (Element()) (<VIRG> (Element()))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Element()          : {/*@bgen(jjtree) Element */
                           ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1 = null, t2 = null, t3 = null;}
{/*@bgen(jjtree) Element */
  try {
/*@egen*/
  t1=<ID> [t2="[""]"]/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/{jjtn000.setValues((t1 == null ? "": t1.image), (t2 == null ? "": t2.image));}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Stmtlst() : {}
{
  (Stmt())*
}

void Stmt() : {}
{

  try{
	While() | If() | LOOKAHEAD(3) Assign() | Call() <PVIRG>
  }
  catch(ParseException e){
	int[] kinds = {PVIRG, RPAR};	
	error_multskipto(e, kinds, "STATEMENT");
  }
}

void Assign()         : {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
	Lhs() <ASSIGN>
    try{
      Rhs() 
	}
	catch(ParseException e){
	  error_skipto(e, PVIRG, "RIGHT ASSIGN");
    }
	try{
		<PVIRG>
	}
	catch(ParseException e){
	 error(e, "RIGHT ASSIGN");
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Lhs() : {}
{
  Access()
}

void Rhs()      : {/*@bgen(jjtree) Rhs */
                   ASTRhs jjtn000 = new ASTRhs(JJTRHS);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}
{/*@bgen(jjtree) Rhs */
  try {
/*@egen*/
  (Term() [( t1=<ARITH_OP> | t1=<BITWISE_OP> | t1=<ADDSUB_OP> ) {jjtn000.setValues(t1.image);}
   Term()])  | "[" ArraySize() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ArraySize()            : {/*@bgen(jjtree) ArraySize */
                               ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
                               jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}
{/*@bgen(jjtree) ArraySize */
  try {
/*@egen*/
  Access() | t1=<INTEGER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                         }
/*@egen*/{jjtn000.setValues(t1.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Term()       : {/*@bgen(jjtree) Term */
                     ASTTerm jjtn000 = new ASTTerm(JJTTERM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1=null, t2=null;}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  [t2=<ADDSUB_OP>]
  (t1=<INTEGER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/{jjtn000.setValues((t1 == null ? "": t1.image), (t2 == null ? "": t2.image));} | LOOKAHEAD(3) Call() | Access())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Exprtest()           : {/*@bgen(jjtree) Exprtest */
                             ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}
{/*@bgen(jjtree) Exprtest */
  try {
/*@egen*/
  try{
    <LPAR>
      Lhs() t1=<RELA_OP>{jjtn000.setValues(t1.image);} Rhs()
    <RPAR>
  }
  catch(ParseException e){
    error_skipto(e, RPAR, "EXPRTEST");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void While()        : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  <WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void If()     : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
  try{
	  [<ELSE> <LCHAVETA> Stmtlst() <RCHAVETA>]
  }
  catch(ParseException e){
	error_skipto(e, PVIRG, "ELSE");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Call()      : {/*@bgen(jjtree) Call */
                    ASTCall jjtn000 = new ASTCall(JJTCALL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1=null, t2=null;}
{/*@bgen(jjtree) Call */
  try {
/*@egen*/
  t1=<ID> ["." t2=<ID>] <LPAR>
  {jjtn000.setValues(t1.image, (t2 == null ? "": t2.image));}
  try{
    [ArgumentList()] <RPAR>
  }
  catch(ParseException e){
    error_skipto(e, RPAR, "FUNCTION CALL ARGS");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ArgumentList()              : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
  try {
/*@egen*/
  Argument() (<VIRG> Argument())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Argument()           : {/*@bgen(jjtree) Argument */
                             ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1;}
{/*@bgen(jjtree) Argument */
  try {
/*@egen*/
  (t1=<ID> | t1=<STRING> | t1=<INTEGER>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {jjtn000.setValues(t1.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Access()         : {/*@bgen(jjtree) Access */
                         ASTAccess jjtn000 = new ASTAccess(JJTACCESS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1, t2 = null;}
{/*@bgen(jjtree) Access */
  try {
/*@egen*/
  t1=<ID> ("[" Index() "]" | ["." t2=<SIZE>])/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {jjtn000.setValues(t1.image, (t2 == null ? "": ".size"));}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Index()        : {/*@bgen(jjtree) Index */
                       ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
                       jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1=null;}
{/*@bgen(jjtree) Index */
  try {
/*@egen*/
  (t1=<INTEGER> | t1=<ID>)/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {jjtn000.setValues((t1 == null ? "" : t1.image));}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}