options {
  LOOKAHEAD=1;
  MULTI=true;
  IGNORE_CASE=true;
  NODE_DEFAULT_VOID=true;
  TRACK_TOKENS=true;
}

PARSER_BEGIN(Yal)
import java.io.FileReader;
import java.io.FileNotFoundException;
public class Yal {
  public static int nErrors = 0;
  public static final int ERROR_LIMIT = 5;
  public static void main(String args[]) throws ParseException, FileNotFoundException {
    Yal parser = new Yal(new FileReader("mymodule.yal"));
    ASTModule root = parser.Module();
    root.dump(">");
    System.out.println("Program parsed with "+Yal.nErrors+" errors");
  }
}
PARSER_END(Yal)

<DEFAULT> SKIP : {
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}
/* reserved words */
<DEFAULT> TOKEN : {
  <RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
  | <ADDSUB_OP: "+" | "-">
  | <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
  | <BITWISE_OP: "&" | "|" | "^">
  | <NOT_OP: "!">
  | <WHILE: "while">
  | <IF: "if">
  | <ELSE: "else">
  | <ASSIGN: "=">
  | <ASPA: "\"">
  | <LPAR: "(">
  | <RPAR: ")">
  | <VIRG: ",">
  | <PVIRG: ";">
  | <LCHAVETA: "{">
  | <RCHAVETA: "}">
  | <FUNCTION: "function">
  | <MODULE: "module">
  | <SIZE: "size">
}
<DEFAULT> TOKEN : {
  <INTEGER: (<DIGIT>)+>
  | <ID: <LETTER> (<LETTER> | <DIGIT>)*>
  | <#LETTER: ["$","A"-"Z","_","a"-"z"]>
  | <#DIGIT: ["0"-"9"]>
  | <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

JAVACODE
void error_skipto(ParseException e, int kind, String whereWasCaught) {
  ++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message
  Token t;
  //MUST be do while
  do {
    t = getNextToken();
  } while (t.kind != kind);
}

JAVACODE
void error(ParseException e, String whereWasCaught) {
  ++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message
}

ASTModule Module() #Module : {}
{
  <MODULE> <ID> <LCHAVETA> (Declaration())* (Function())* <RCHAVETA> {return jjtThis;}
}

void Declaration() #Declaration : {}
{
  Element() [<ASSIGN> (("[" ArraySize() "]") | [<ADDSUB_OP>] <INTEGER>)] <PVIRG>
}

void Function() #Function : {}
{
  try {
    <FUNCTION> Element() [<ASSIGN> <ID>] <LPAR>
  }
  catch(ParseException e){
    error_skipto(e, LPAR, "FUNCTION DECLARATION");
  }

  try {
    [Varlist()] <RPAR>
  }
  catch(ParseException e){
    error_skipto(e, RPAR, "FUNCTION DECLARATION ARGS");
  }

    <LCHAVETA> Stmtlst() <RCHAVETA>
}

void Varlist() : {}
{
  (Element()) (<VIRG> (Element()))*
}

void Element() #Element : {}
{
  <ID> ["[" "]"]
}

void Stmtlst() : {}
{
  (Stmt())*
}

void Stmt() : {}
{
  While() | If() | LOOKAHEAD(3) Assign() |  Call() <PVIRG>
}

void Assign() #Assign : {}
{
    Lhs() <ASSIGN>
    try{
      Rhs() <PVIRG>
    }
    catch(ParseException e){
      error(e, "");
    }
}

void Lhs() : {}
{
  Access()
}

void Rhs() : {}
{
  (Term() [( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term()])  | "[" ArraySize() "]"
}

void ArraySize() : {}
{
  Access() | <INTEGER>
}

void Term() : {}
{
 [<ADDSUB_OP>] (<INTEGER> | LOOKAHEAD(3) Call() | Access())
}

void Exprtest() : {}
{
  <LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
}

void While() #While : {}
{
  <WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
}

void If() #If : {}
{
  <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> [<ELSE> <LCHAVETA> Stmtlst() <RCHAVETA>]
}

void Call() #Call: {}
{
  <ID> ["." <ID>] <LPAR>
  try{
    [ArgumentList()] <RPAR>
  }
  catch(ParseException e){
    error_skipto(e, RPAR, "FUNCTION CALL ARGS");
  }
}

void ArgumentList() : {}
{
  Argument() (<VIRG> Argument())*
}

void Argument() : {}
{
  (<ID> | <STRING> | <INTEGER>)
}

void Access() : {}
{
  <ID> ("[" Index() "]" | ["." <SIZE>])
}

void Index() : {}
{
  <ID> | <INTEGER>
}
