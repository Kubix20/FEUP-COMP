/* Yal.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Yal.java */
import java.io.FileReader;
import java.io.FileNotFoundException;
public class Yal/*@bgen(jjtree)*/implements YalTreeConstants, YalConstants {/*@bgen(jjtree)*/
  protected static JJTYalState jjtree = new JJTYalState();public static int nErrors = 0;
  public static final int ERROR_LIMIT = 5;
  public static void main(String args[]) throws ParseException, FileNotFoundException {
        String newline = System.lineSeparator();
        System.out.println(newline+newline+
                                           "<<<<<<<< Parsing file "+ args[0]+ " >>>>>>>>>"+
                                           newline+newline);
    Yal parser = new Yal(new FileReader(args[0]));
    ASTModule root = parser.Module();
    root.dump(">");
    System.out.println("Program parsed with "+Yal.nErrors+" errors");
  }

  static void error_skipto(ParseException e, int kind, String whereWasCaught) throws ParseException {++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message
  Token t;
  //MUST be do while
  do {
    t = getNextToken();
        System.out.println(t);
  } while (t.kind != kind);
  System.out.println("Proceeding with "+t.image+" of kind "+t.kind);
  }

  static void error_skipto_lookahead(ParseException e, int kind, String whereWasCaught) throws ParseException {++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message
  Token t = e.currentToken;
  //MUST be do while
  while(getToken(1).kind != kind){
    t = getNextToken();
        System.out.println(t);
  }
  System.out.println("Proceeding with "+t.image+" of kind "+t.kind);
  }

  static boolean contains(int[] kinds, int kind) throws ParseException {for(int i=0; i<kinds.length; i++) {
          if(kinds[i] == kind)
                  return true;
  }
  return false;
  }

  static void error_multskipto(ParseException e, int[] kinds, String whereWasCaught) throws ParseException {++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message
  Token t;
  //MUST be do while
  do {
    t = getNextToken();
        System.out.println(t);
  } while (!contains(kinds,t.kind));
  System.out.println("Proceeding with "+t.image+" of kind "+t.kind);
  }

  static void error(ParseException e, String whereWasCaught) throws ParseException {++Yal.nErrors;
  System.out.println("EXCEPTION CAUGHT IN "+whereWasCaught+": "+e.toString());  // print the error message

  }

  static final public ASTModule Module() throws ParseException {/*@bgen(jjtree) Module */
                              ASTModule jjtn000 = new ASTModule(JJTMODULE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
                              jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      jj_consume_token(MODULE);
      t1 = jj_consume_token(ID);
jjtn000.setValues(t1.image);
      jj_consume_token(LCHAVETA);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Declaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Function();
      }
      try {
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
error_skipto(e, RCHAVETA, "BEFORE MODULE END");
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Declaration() throws ParseException {/*@bgen(jjtree) Declaration */
                                   ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
                                   jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      try {
        Element();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          t1 = jj_consume_token(ASSIGN);
jjtn000.setValues(t1.image);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 31:{
            jj_consume_token(31);
            ArraySize();
            jj_consume_token(32);
            break;
            }
          case ADDSUB_OP:
          case INTEGER:{
            IntElement();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
error_skipto(e, PVIRG, "DECLARATION");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Function() throws ParseException {/*@bgen(jjtree) Function */
                             ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      try {
        jj_consume_token(FUNCTION);
        if (jj_2_1(2)) {
          Element();
          jj_consume_token(ASSIGN);
        } else {
          ;
        }
        t1 = jj_consume_token(ID);
jjtn000.setValues(t1.image);
        jj_consume_token(LPAR);
      } catch (ParseException e) {
error_skipto(e, LPAR, "FUNCTION DECLARATION");
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          Varlist();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } catch (ParseException e) {
error_skipto(e, RPAR, "FUNCTION DECLARATION ARGS");
      }
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void IntElement() throws ParseException {/*@bgen(jjtree) IntElement */
                                 ASTIntElement jjtn000 = new ASTIntElement(JJTINTELEMENT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));Token t1 = null, t2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADDSUB_OP:{
        t1 = jj_consume_token(ADDSUB_OP);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      t2 = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setValues((t1 == null ? "": t1.image), (t2 == null ? "": t2.image));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Varlist() throws ParseException {/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Element();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRG:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(VIRG);
        Element();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Element() throws ParseException {/*@bgen(jjtree) Element */
                           ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtn000.jjtSetFirstToken(getToken(1));Token t1 = null, t2 = null, t3 = null;
    try {
      t1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 31:{
        t2 = jj_consume_token(31);
        jj_consume_token(32);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setValues((t1 == null ? "": t1.image), (t2 == null ? "": t2.image));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void CmpStmtLst() throws ParseException {
    jj_consume_token(LCHAVETA);
    Stmtlst();
    jj_consume_token(RCHAVETA);
  }

  static final public void Stmtlst() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:
      case IF:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      Stmt();
    }
  }

  static final public void Stmt() throws ParseException {
    try {
      if (jj_2_2(3)) {
        While();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:{
          If();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          if (jj_2_3(3)) {
            try {
              Assign();
            } catch (ParseException e) {
int[] kinds = {PVIRG, LPAR};
           error_multskipto(e, kinds, "STATEMENT ASSIGN");
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ID:{
              try {
                Call();
              } catch (ParseException e) {
error_skipto_lookahead(e, PVIRG, "FUNCTION CALL");
              }
              try {
                jj_consume_token(PVIRG);
              } catch (ParseException e) {
System.out.println("PVIIRG " + e.currentToken.image);
                  if(e.currentToken.image.compareTo("}") != 0)
                    error(e,"STATEMENT MISSING ;");
              }
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (ParseException e) {
int[] kinds = {PVIRG, RCHAVETA};
        error_multskipto(e,kinds,"STATEMENT");
    }
  }

  static final public void Assign() throws ParseException {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Lhs();
      jj_consume_token(ASSIGN);
      try {
        Rhs();
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
error_skipto(e, PVIRG, "RIGHT ASSIGN");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void Lhs() throws ParseException {
    Access();
  }

  static final public void Rhs() throws ParseException {/*@bgen(jjtree) Rhs */
                   ASTRhs jjtn000 = new ASTRhs(JJTRHS);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADDSUB_OP:
      case INTEGER:
      case ID:{
        Term();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ARITH_OP:{
            t1 = jj_consume_token(ARITH_OP);
            break;
            }
          case BITWISE_OP:{
            t1 = jj_consume_token(BITWISE_OP);
            break;
            }
          case ADDSUB_OP:{
            t1 = jj_consume_token(ADDSUB_OP);
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
jjtn000.setValues(t1.image);
          Term();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
        }
      case 31:{
        jj_consume_token(31);
        ArraySize();
        jj_consume_token(32);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ArraySize() throws ParseException {/*@bgen(jjtree) ArraySize */
                               ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
                               jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        Access();
        break;
        }
      case INTEGER:{
        t1 = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setValues(t1.image);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Term() throws ParseException {/*@bgen(jjtree) Term */
                     ASTTerm jjtn000 = new ASTTerm(JJTTERM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));Token t1=null, t2=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADDSUB_OP:{
        t2 = jj_consume_token(ADDSUB_OP);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        t1 = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setValues((t1 == null ? "": t1.image), (t2 == null ? "": t2.image));
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_4(3)) {
          Call();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ID:{
            Access();
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Exprtest() throws ParseException {/*@bgen(jjtree) Exprtest */
                             ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      try {
        jj_consume_token(LPAR);
        Lhs();
        t1 = jj_consume_token(RELA_OP);
jjtn000.setValues(t1.image);
        Rhs();
        jj_consume_token(RPAR);
      } catch (ParseException e) {
error_skipto(e, RPAR, "EXPRTEST");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHILE);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void If() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      try {
        Exprtest();
      } catch (ParseException e) {
error_skipto_lookahead(e, LCHAVETA, "IF");
      }
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          jj_consume_token(ELSE);
          jj_consume_token(LCHAVETA);
          Stmtlst();
          jj_consume_token(RCHAVETA);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          ;
        }
      } catch (ParseException e) {
error_skipto(e, PVIRG, "ELSE");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Call() throws ParseException {/*@bgen(jjtree) Call */
                    ASTCall jjtn000 = new ASTCall(JJTCALL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t1, t2=null;
    try {
      t1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        jj_consume_token(33);
        t2 = jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
jjtn000.setValues(t1.image, (t2 == null ? "": t2.image));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:{
          ArgumentList();
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } catch (ParseException e) {
error_skipto(e, RPAR, "FUNCTION CALL ARGS");
        if(getToken(1).image.compareTo("{") == 0){
           System.out.println("Starting call RECOVERY");
           CmpStmtLst();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ArgumentList() throws ParseException {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Argument();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRG:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRG);
        Argument();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Argument() throws ParseException {/*@bgen(jjtree) Argument */
                             ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        t1 = jj_consume_token(ID);
        break;
        }
      case STRING:{
        t1 = jj_consume_token(STRING);
        break;
        }
      case INTEGER:{
        t1 = jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setValues(t1.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Access() throws ParseException {/*@bgen(jjtree) Access */
                         ASTAccess jjtn000 = new ASTAccess(JJTACCESS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));Token t1, t2 = null;
    try {
      t1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 31:{
        jj_consume_token(31);
        Index();
        jj_consume_token(32);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 33:{
          jj_consume_token(33);
          t2 = jj_consume_token(SIZE);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          ;
        }
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setValues(t1.image, (t2 == null ? "": ".size"));
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Index() throws ParseException {/*@bgen(jjtree) Index */
                       ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
                       jjtn000.jjtSetFirstToken(getToken(1));Token t1=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        t1 = jj_consume_token(INTEGER);
        break;
        }
      case ID:{
        t1 = jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setValues((t1 == null ? "" : t1.image));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_10()
 {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(SIZE)) return true;
    return false;
  }

  static private boolean jj_3R_6()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_6()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(31)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    if (jj_3R_12()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_7()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public YalTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x800000,0x84000100,0x8000,0x8000000,0x100,0x80000,0x80000000,0x8003000,0x2000,0x8000000,0x700,0x700,0x8c000100,0xc000000,0x100,0x4000000,0x8000000,0x4000,0x0,0x4c000000,0x80000,0x4c000000,0x0,0x80000000,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Yal(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Yal(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new YalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Yal(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new YalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Yal(YalTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(YalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
